// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// arma_pmax
arma::vec arma_pmax(arma::vec x, arma::vec y);
RcppExport SEXP _fcfdr_arma_pmax(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(arma_pmax(x, y));
    return rcpp_result_gen;
END_RCPP
}
// arma_pmin
arma::vec arma_pmin(arma::vec x, arma::vec y);
RcppExport SEXP _fcfdr_arma_pmin(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(arma_pmin(x, y));
    return rcpp_result_gen;
END_RCPP
}
// approxExtrap_rcpp
arma::vec approxExtrap_rcpp(arma::vec x, arma::vec y, arma::vec xout);
RcppExport SEXP _fcfdr_approxExtrap_rcpp(SEXP xSEXP, SEXP ySEXP, SEXP xoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xout(xoutSEXP);
    rcpp_result_gen = Rcpp::wrap(approxExtrap_rcpp(x, y, xout));
    return rcpp_result_gen;
END_RCPP
}
// approxfun_rcpp
arma::vec approxfun_rcpp(arma::vec x, arma::vec y, arma::vec xout);
RcppExport SEXP _fcfdr_approxfun_rcpp(SEXP xSEXP, SEXP ySEXP, SEXP xoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xout(xoutSEXP);
    rcpp_result_gen = Rcpp::wrap(approxfun_rcpp(x, y, xout));
    return rcpp_result_gen;
END_RCPP
}
// per_group_binary_cfdr_rcpp
arma::vec per_group_binary_cfdr_rcpp(arma::vec p_loo, arma::vec q_loo, arma::vec ps, arma::vec qs, arma::vec x, bool verbose);
RcppExport SEXP _fcfdr_per_group_binary_cfdr_rcpp(SEXP p_looSEXP, SEXP q_looSEXP, SEXP psSEXP, SEXP qsSEXP, SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p_loo(p_looSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type q_loo(q_looSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qs(qsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(per_group_binary_cfdr_rcpp(p_loo, q_loo, ps, qs, x, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fcfdr_arma_pmax", (DL_FUNC) &_fcfdr_arma_pmax, 2},
    {"_fcfdr_arma_pmin", (DL_FUNC) &_fcfdr_arma_pmin, 2},
    {"_fcfdr_approxExtrap_rcpp", (DL_FUNC) &_fcfdr_approxExtrap_rcpp, 3},
    {"_fcfdr_approxfun_rcpp", (DL_FUNC) &_fcfdr_approxfun_rcpp, 3},
    {"_fcfdr_per_group_binary_cfdr_rcpp", (DL_FUNC) &_fcfdr_per_group_binary_cfdr_rcpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_fcfdr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
